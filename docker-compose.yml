version: '3.8'

services:
  # Redis for caching security check results
  redis:
    image: redis:7-alpine
    container_name: mcp-security-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: mcp-security-db
    environment:
      POSTGRES_DB: mcpsecurity
      POSTGRES_USER: mcpuser
      POSTGRES_PASSWORD: mcppassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcpuser -d mcpsecurity"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main security server
  security-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-security-server
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://mcpuser:mcppassword@postgres:5432/mcpsecurity
      - SECURITY_API_KEY=dev-secret-key-change-in-production
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - LOG_LEVEL=INFO
    volumes:
      - ./:/app
      - ./logs:/app/logs
      - model_cache:/app/models
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-security-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    depends_on:
      - security-server

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-security-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  model_cache: 